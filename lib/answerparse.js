// Generated by CoffeeScript 1.3.3
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function() {
  var advancedCompare, checkAnswer, checkWord, damlev, isPerson, levens, parseAnswer, rawCompare, reduceAlphabet, reduceLetter, removeDiacritics, safeCheckAnswer, splitWords, stem, stemmer, stopnames, stopwords;
  removeDiacritics = require('./removeDiacritics').removeDiacritics;
  damlev = require('./levenshtein').levenshtein;
  stemmer = require('./porter').stemmer;
  stopwords = "derp rofl lmao lawl lole lol the on of is a in on that have for at so it do or de y by accept any and".split(' ');
  stopnames = "ivan james john robert michael william david richard charles joseph thomas christopher daniel paul mark donald george steven edward brian ronald anthony kevin jason benjamin mary patricia linda barbara elizabeth jennifer maria susan margaret dorothy lisa karen henry harold luke matthew";
  parseAnswer = function(answer) {
    var clean, comp, neg, part, pos, _i, _len;
    answer = answer.replace(/[\[\]\<\>\{\}][\w\-]+?[\[\]\<\>\{\}]/g, '');
    clean = (function() {
      var _i, _len, _ref, _results;
      _ref = answer.split(/[^\w]or[^\w]|\[|\]|\{|\}|\;|\,|\<|\>|\(|\)/g);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        _results.push(part.trim());
      }
      return _results;
    })();
    clean = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = clean.length; _i < _len; _i++) {
        part = clean[_i];
        if (part !== '') {
          _results.push(part);
        }
      }
      return _results;
    })();
    pos = [];
    neg = [];
    for (_i = 0, _len = clean.length; _i < _len; _i++) {
      part = clean[_i];
      part = removeDiacritics(part);
      part = part.replace(/\"|\'|\“|\”|\.|’|\:/g, '');
      part = part.replace(/-/g, ' ');
      if (/equivalent|word form|other wrong/.test(part)) {

      } else if (/do not|dont/.test(part)) {
        neg.push(part);
      } else if (/accept/.test(part)) {
        comp = part.split(/before|until/);
        if (comp.length > 1) {
          neg.push(comp[1]);
        }
        pos.push(comp[0]);
      } else {
        pos.push(part);
      }
    }
    return [pos, neg];
  };
  stem = function(word) {
    return stemmer(word.replace(/ez$/g, 'es').replace(/[^\w]/g, ''));
  };
  splitWords = function(text) {
    var arr, word, words;
    arr = (function() {
      var _i, _len, _ref, _results;
      _ref = text.toLowerCase().split(/\s+/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        _results.push(word.trim());
      }
      return _results;
    })();
    words = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        word = arr[_i];
        if (__indexOf.call(stopwords, word) < 0 && word !== '') {
          _results.push(stem(word));
        }
      }
      return _results;
    })();
    return words;
  };
  isPerson = function(answer) {
    var canon, caps, name;
    canon = (function() {
      var _i, _len, _ref, _results;
      _ref = answer.split(/\s+/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (name.length > 3) {
          _results.push(name);
        }
      }
      return _results;
    })();
    caps = (function() {
      var _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = canon.length; _i < _len; _i++) {
        name = canon[_i];
        if (("A" <= (_ref = name[0]) && _ref <= "Z")) {
          _results.push(name);
        }
      }
      return _results;
    })();
    return caps.length === canon.length;
  };
  reduceLetter = function(letter) {
    if (letter === 'z' || letter === 's' || letter === 'k' || letter === 'c') {
      return 's';
    }
    if (letter === 'e' || letter === 'a' || letter === 'o' || letter === 'u' || letter === 'y' || letter === 'i') {
      return 'e';
    }
    return letter;
  };
  reduceAlphabet = function(word) {
    var letter, letters;
    letters = (function() {
      var _i, _len, _ref, _results;
      _ref = word.split('');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        letter = _ref[_i];
        _results.push(reduceLetter(letter));
      }
      return _results;
    })();
    return letters.join('');
  };
  levens = function(a, b) {
    return damlev(reduceAlphabet(a), reduceAlphabet(b));
  };
  checkWord = function(word, list) {
    var frac, len, real, score, scores, valid, _ref;
    scores = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        valid = list[_i];
        score = levens(valid, word);
        _results.push([score, valid.length - score, valid.length, valid]);
      }
      return _results;
    })();
    if (scores.length === 0) {
      return '';
    }
    scores = scores.sort(function(a, b) {
      return a[0] - b[0];
    });
    _ref = scores[0], score = _ref[0], real = _ref[1], len = _ref[2], valid = _ref[3];
    frac = real / len;
    console.log(word, valid, list, len, score, frac);
    if (len > 4) {
      if (frac >= 0.65) {
        return valid;
      }
    } else {
      if (frac >= 0.60) {
        return valid;
      }
    }
    return '';
  };
  advancedCompare = function(inputText, p, questionWords) {
    var invalid_count, is_person, list, result, valid_count, value, word, _i, _len;
    is_person = isPerson(p.trim());
    list = (function() {
      var _i, _len, _ref, _results;
      _ref = splitWords(p);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        if (__indexOf.call(questionWords, word) < 0) {
          _results.push(word);
        }
      }
      return _results;
    })();
    valid_count = 0;
    invalid_count = 0;
    for (_i = 0, _len = inputText.length; _i < _len; _i++) {
      word = inputText[_i];
      value = 1;
      result = checkWord(word, list);
      if (is_person && __indexOf.call(stopnames, result) >= 0 && __indexOf.call(list, 'gospel') < 0) {
        value = 0.5;
      }
      if (result) {
        valid_count += value;
      } else {
        invalid_count += value;
      }
    }
    console.log("ADVANCED", valid_count, invalid_count, inputText.length);
    return valid_count - invalid_count >= 1;
  };
  rawCompare = function(compare, p) {
    var accuracy, diff, minlen;
    compare = compare.toLowerCase().replace(/[^\w]/g, '');
    p = p.toLowerCase().replace(/[^\w]/g, '');
    minlen = Math.min(compare.length, p.length);
    diff = levens(compare.slice(0, minlen), p.slice(0, minlen));
    accuracy = 1 - (diff / minlen);
    console.log("RAW LEVENSHTEIN", diff, minlen, accuracy);
    if (minlen >= 4 && accuracy >= 0.70) {
      return true;
    }
    return false;
  };
  checkAnswer = function(compare, answer, question) {
    var compyr, inputText, neg, p, pos, questionWords, word, year, _i, _len, _ref;
    if (question == null) {
      question = '';
    }
    console.log('---------------------------');
    question = removeDiacritics(question).trim();
    answer = removeDiacritics(answer).trim();
    compare = removeDiacritics(compare).trim();
    questionWords = splitWords(question);
    inputText = (function() {
      var _i, _len, _ref, _results;
      _ref = splitWords(compare);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        if (__indexOf.call(questionWords, word) < 0) {
          _results.push(word);
        }
      }
      return _results;
    })();
    _ref = parseAnswer(answer.trim()), pos = _ref[0], neg = _ref[1];
    console.log("ACCEPT", pos, "REJECT", neg);
    for (_i = 0, _len = pos.length; _i < _len; _i++) {
      p = pos[_i];
      if (compare.replace(/[^0-9]/g, '').length === 4) {
        year = compare.replace(/[^0-9]/g, '');
        compyr = p.replace(/[^0-9]/g, '');
        console.log("YEAR COMPARE", year, compyr);
        if (year === compyr) {
          return true;
        }
      } else {
        if (advancedCompare(inputText, p, questionWords)) {
          return true;
        }
        if (rawCompare(compare, p)) {
          return true;
        }
      }
    }
    return false;
  };
  safeCheckAnswer = function(compare, answer, question) {
    try {
      return checkAnswer(compare, answer, question);
    } catch (error) {
      console.log("ERROR", error);
      return false;
    }
  };
  stopnames = splitWords(stopnames);
  exports.checkAnswer = safeCheckAnswer;
  return exports.parseAnswer = parseAnswer;
})();
