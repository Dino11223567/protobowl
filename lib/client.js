// Generated by CoffeeScript 1.3.3
var actionMode, addAnnotation, addImportant, avg, changeQuestion, chatAnnotation, checkAlone, computeScore, compute_sync_offset, connected, createAlert, createBundle, createCategoryList, createStatSheet, cumsum, ding_sound, formatRelativeTime, formatTime, getTimeSpan, guessAnnotation, handleCacheEvent, inner_socket, lastRendering, last_question, latency_log, mobileLayout, next, public_id, public_name, public_rooms, rate_limit_ceiling, rate_limit_check, recent_actions, removeSplash, renderCategoryItem, renderPartial, renderState, renderTimer, serverTime, setActionMode, skip, sock, stdev, sum, sync, sync_offset, sync_offsets, synchronize, testLatency, time, updateTextAnnotations, updateTextPosition, userSpan, users,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

if (typeof io !== "undefined" && io !== null) {
  inner_socket = io.connect(location.hostname, {
    "connect timeout": 2000
  });
}

sync = {};

users = {};

sync_offsets = [];

sync_offset = 0;

public_rooms = ['lobby', 'hsquizbowl'];

sock = {
  listeners: {},
  disconnect: function() {
    var virtual_connect;
    if (inner_socket.socket.connecting) {
      virtual_connect = function() {
        if (typeof virtual_server !== "undefined" && virtual_server !== null) {
          return virtual_server.connect();
        } else {
          return setTimeout(virtual_connect, 100);
        }
      };
      virtual_connect();
    }
    return inner_socket.disconnect();
  },
  emit: function(name, data, fn) {
    var el, result;
    if (connected()) {
      return inner_socket.emit(name, data, fn);
    } else if (typeof virtual_server !== "undefined" && virtual_server !== null) {
      if (name in virtual_server) {
        result = virtual_server[name](data);
        if (fn) {
          fn(result);
        }
        return renderPartial();
      } else {
        return console.log(name, data, fn);
      }
    } else {
      if ($('.active .not-loaded').length > 0) {
        el = $('.active .not-loaded');
      } else {
        el = $('<p>').addClass('not-loaded well');
        addImportant(el);
      }
      el.data('num', (el.data('num') || 0) + 1);
      el.text("Offline component not loaded ");
      if (el.data('num') > 1) {
        return el.append($('<span>').addClass('label').text("x" + el.data('num')));
      }
    }
  },
  server_emit: function(name, data) {
    return sock.listeners[name](data);
  },
  on: function(name, listen) {
    if (inner_socket != null) {
      inner_socket.on(name, listen);
    }
    return sock.listeners[name] = listen;
  }
};

if (typeof io === "undefined" || io === null) {
  $('.new-room').remove();
}

connected = function() {
  return (inner_socket != null) && inner_socket.socket.connected;
};

jQuery.fn.disable = function(value) {
  var current;
  current = $(this).attr('disabled') === 'disabled';
  if (current !== value) {
    return $(this).attr('disabled', value);
  }
};

mobileLayout = function() {
  if (window.matchMedia) {
    return matchMedia('(max-width: 768px)').matches;
  } else {
    return false;
  }
};

avg = function(list) {
  return sum(list) / list.length;
};

sum = function(list) {
  var item, s, _i, _len;
  s = 0;
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    item = list[_i];
    s += item;
  }
  return s;
};

stdev = function(list) {
  var item, mu;
  mu = avg(list);
  return Math.sqrt(avg((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      _results.push((item - mu) * (item - mu));
    }
    return _results;
  })()));
};

cumsum = function(list, rate) {
  var num, s, _i, _len, _ref, _results;
  s = 0;
  _ref = [5].concat(list).slice(0, -1);
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    num = _ref[_i];
    _results.push(s += Math.round(num) * rate);
  }
  return _results;
};

time = function() {
  if (sync.time_freeze) {
    return sync.time_freeze;
  } else {
    return serverTime() - sync.time_offset;
  }
};

serverTime = function() {
  return new Date - sync_offset;
};

window.onbeforeunload = function() {
  if (inner_socket != null) {
    localStorage.old_socket = inner_socket.socket.sessionid;
  }
  return void 0;
};

sock.on('echo', function(data, fn) {
  return fn('alive');
});

sock.on('disconnect', function() {
  var line, _ref;
  if (((_ref = sync.attempt) != null ? _ref.user : void 0) !== public_id) {
    sync.attempt = null;
  }
  line = $('<div>').addClass('well');
  line.append($('<p>').append("You were ", $('<span class="label label-important">').text("disconnected"), " from the server for some reason. ", $('<em>').text(new Date)));
  line.append($('<p>').append("This may be due to a drop in the network 			connectivity or a malfunction in the server. The client will automatically 			attempt to reconnect to the server and in the mean time, the app has automatically transitioned			into <b>offline mode</b>. You can continue playing alone with a limited offline set			of questions without interruption. However, you might want to try <a href=''>reloading</a>."));
  addImportant($('<div>').addClass('log disconnect-notice').append(line));
  sock.emit('init_offline', 'yay');
  return renderState();
});

sock.on('application_update', function() {
  if (typeof applicationCache !== "undefined" && applicationCache !== null) {
    return applicationCache.update();
  }
});

sock.on('application_force_update', function() {
  return $('#update').slideDown();
});

public_name = null;

public_id = null;

sock.on('connect', function() {
  $('.actionbar button').disable(false);
  $('.timer').removeClass('disabled');
  $('.disconnect-notice').slideUp();
  return sock.emit('disco', {
    old_socket: localStorage.old_socket
  });
});

sock.on('redirect', function(url) {
  return window.location = url;
});

sock.on('alert', function(text) {
  console.log('got alert', text);
  return window.alert(text);
});

sock.on('joined', function(data) {
  public_name = data.name;
  public_id = data.id;
  $('#username').val(public_name);
  return $('#username').disable(false);
});

$('#username').keyup(function(e) {
  if (e.keyCode === 13) {
    $(this).blur();
  }
  if ($(this).val().length > 0) {
    return sock.emit('rename', $(this).val());
  }
});

createCategoryList = function() {
  var cat, item, picker, _i, _len, _ref, _results;
  $('.custom-category').empty();
  if (!sync.distribution) {
    return;
  }
  _ref = sync.categories;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    cat = _ref[_i];
    item = $('<div>').addClass('category-item').appendTo('.custom-category').data('value', cat);
    $('<span>').addClass('name').text(cat).appendTo(item);
    picker = $('<div>').addClass('btn-group pull-right dist-picker').appendTo(item);
    $('<button>').addClass('btn btn-small decrease disabled').append($('<i>').addClass('icon-minus')).appendTo(picker);
    $('<button>').addClass('btn btn-small increase disabled').append($('<i>').addClass('icon-plus')).appendTo(picker);
    $('<span>').addClass('percentage pull-right').css('color', 'gray').appendTo(item);
    _results.push(renderCategoryItem(item));
  }
  return _results;
};

renderCategoryItem = function(item) {
  var cat, percentage, s, val, value, _ref;
  if (!sync.distribution) {
    return;
  }
  s = 0;
  _ref = sync.distribution;
  for (cat in _ref) {
    val = _ref[cat];
    s += val;
  }
  value = $(item).data('value');
  percentage = sync.distribution[value] / s;
  $(item).find('.percentage').html("" + (Math.round(100 * percentage)) + "% &nbsp;");
  $(item).find('.increase').removeClass('disabled');
  if (percentage > 0 && s > 1) {
    $(item).find('.decrease').removeClass('disabled');
  } else {
    $(item).find('.decrease').addClass('disabled');
    $(item).find('.name').css('font-weight', 'normal');
  }
  if (percentage > 0) {
    return $(item).find('.name').css('font-weight', 'bold');
  }
};

$('.dist-picker .increase').live('click', function(e) {
  var item, _i, _len, _ref, _results;
  if (!sync.distribution) {
    return;
  }
  item = $(this).parents('.category-item');
  sync.distribution[$(item).data('value')]++;
  sock.emit('distribution', sync.distribution);
  _ref = $('.custom-category .category-item');
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    item = _ref[_i];
    _results.push(renderCategoryItem(item));
  }
  return _results;
});

$('.dist-picker .decrease').live('click', function(e) {
  var cat, item, s, val, _i, _len, _ref, _ref1, _results;
  if (!sync.distribution) {
    return;
  }
  item = $(this).parents('.category-item');
  s = 0;
  _ref = sync.distribution;
  for (cat in _ref) {
    val = _ref[cat];
    s += val;
  }
  if (sync.distribution[$(item).data('value')] > 0 && s > 1) {
    sync.distribution[$(item).data('value')]--;
    sock.emit('distribution', sync.distribution);
  }
  _ref1 = $('.custom-category .category-item');
  _results = [];
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    item = _ref1[_i];
    _results.push(renderCategoryItem(item));
  }
  return _results;
});

synchronize = function(data) {
  var attr, cat, dif, user, wpm, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
  if (data) {
    sync_offsets.push(+(new Date) - data.real_time);
    compute_sync_offset();
    for (attr in data) {
      sync[attr] = data[attr];
    }
  }
  if ((data && 'difficulties' in data) || ($('.difficulties')[0].options.length === 0 && sync.difficulties)) {
    $('.difficulties option').remove();
    $('.difficulties')[0].options.add(new Option("Any", ''));
    _ref = sync.difficulties;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dif = _ref[_i];
      $('.difficulties')[0].options.add(new Option(dif, dif));
    }
    $('.categories option').remove();
    $('.categories')[0].options.add(new Option('Everything', ''));
    $('.categories')[0].options.add(new Option('Custom', 'custom'));
    _ref1 = sync.categories;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      cat = _ref1[_j];
      $('.categories')[0].options.add(new Option(cat, cat));
    }
    createCategoryList();
  }
  if (sync.category === 'custom') {
    $('.custom-category').slideDown();
  }
  $('.categories').val(sync.category);
  $('.difficulties').val(sync.difficulty);
  $('.multibuzz').attr('checked', !sync.max_buzz);
  if ($('.settings').is(':hidden')) {
    $('.settings').slideDown();
  }
  if (sync.attempt) {
    updateTextAnnotations();
  }
  if (!data || 'users' in data) {
    _ref2 = sync.users;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      user = _ref2[_k];
      user.room = sync.name;
      users[user.id] = user;
    }
  }
  if (public_id in users && 'show_typing' in users[public_id]) {
    $('.livechat').attr('checked', users[public_id].show_typing);
    $('.sounds').attr('checked', users[public_id].sounds);
    $('.teams').val(users[public_id].team);
  }
  if (!data || 'users' in data) {
    renderState();
  } else {
    renderPartial();
  }
  if (sync.attempt) {
    guessAnnotation(sync.attempt);
  }
  wpm = Math.round(1000 * 60 / 5 / sync.rate);
  if (!$('.speed').data('last_update') || new Date - $(".speed").data("last_update") > 1337) {
    if (Math.abs($('.speed').val() - wpm) > 1) {
      $('.speed').val(wpm);
    }
  }
  if (!sync.attempt || sync.attempt.user !== public_id) {
    if (actionMode === 'guess' || actionMode === 'prompt') {
      return setActionMode('');
    }
  } else {
    if (sync.attempt.prompt) {
      if (actionMode !== 'prompt') {
        setActionMode('prompt');
        return $('.prompt_input').val('').focus();
      }
    } else {
      if (actionMode !== 'guess') {
        return setActionMode('guess');
      }
    }
  }
};

sock.on('sync', function(data) {
  return synchronize(data);
});

latency_log = [];

testLatency = function() {
  var initialTime;
  if (!connected()) {
    return;
  }
  initialTime = +(new Date);
  return sock.emit('echo', {}, function(firstServerTime) {
    var recieveTime;
    recieveTime = +(new Date);
    return sock.emit('echo', {}, function(secondServerTime) {
      var CSC1, CSC2, SCS1, secondTime;
      secondTime = +(new Date);
      CSC1 = recieveTime - initialTime;
      CSC2 = secondTime - recieveTime;
      SCS1 = secondServerTime - firstServerTime;
      sync_offsets.push(recieveTime - firstServerTime);
      sync_offsets.push(secondTime - secondServerTime);
      latency_log.push(CSC1);
      latency_log.push(SCS1);
      latency_log.push(CSC2);
      compute_sync_offset();
      if (latency_log.length > 0) {
        return $('#latency').text(avg(latency_log).toFixed(1) + "/" + stdev(latency_log).toFixed(1) + (" (" + latency_log.length + ")"));
      }
    });
  });
};

setTimeout(function() {
  testLatency();
  return setInterval(function() {
    return testLatency();
  }, 30 * 1000);
}, 2000);

compute_sync_offset = function() {
  var below, item, thresh;
  sync_offsets = sync_offsets.slice(-20);
  thresh = avg(sync_offsets);
  below = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = sync_offsets.length; _i < _len; _i++) {
      item = sync_offsets[_i];
      if (item <= thresh) {
        _results.push(item);
      }
    }
    return _results;
  })();
  sync_offset = avg(below);
  thresh = avg(below);
  below = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = sync_offsets.length; _i < _len; _i++) {
      item = sync_offsets[_i];
      if (item <= thresh) {
        _results.push(item);
      }
    }
    return _results;
  })();
  sync_offset = avg(below);
  return $('#sync_offset').text(sync_offset.toFixed(1) + '/' + stdev(below).toFixed(1) + '/' + stdev(sync_offsets).toFixed(1));
};

last_question = null;

sock.on('chat', function(data) {
  return chatAnnotation(data);
});

/*
	Correct: 10pts
	Early: 15pts
	Interrupts: -5pts
*/


computeScore = function(user) {
  var CORRECT, EARLY, INTERRUPT;
  if (!user) {
    return 0;
  }
  CORRECT = 10;
  EARLY = 15;
  INTERRUPT = -5;
  return user.early * EARLY + (user.correct - user.early) * CORRECT + user.interrupts * INTERRUPT;
};

getTimeSpan = (function() {
  var FEW_SECONDS, HOUR_IN_SECONDS, MINUTE_IN_SECONDS, MONTH_NAMES, SECOND_IN_MILLISECONDS, WEEKDAY_NAMES, formatMonth, formatTime, formatWeekday;
  SECOND_IN_MILLISECONDS = 1000;
  FEW_SECONDS = 5;
  MINUTE_IN_SECONDS = 60;
  HOUR_IN_SECONDS = MINUTE_IN_SECONDS * 60;
  MONTH_NAMES = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  WEEKDAY_NAMES = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  formatTime = function(date) {
    var ampm, formattedHours, formattedMinutes, formattedTime, hours, minutes;
    minutes = date.getMinutes();
    hours = date.getHours();
    ampm = hours > 12 ? "pm" : "am";
    formattedHours = hours === 0 || hours === 12 ? "12" : "" + (hours % 12);
    formattedMinutes = minutes < 10 ? "0" + minutes : "" + minutes;
    formattedTime = "" + formattedHours + ":" + formattedMinutes + ampm;
    return formattedTime;
  };
  formatMonth = function(date) {
    return MONTH_NAMES[date.getMonth()];
  };
  formatWeekday = function(date) {
    return WEEKDAY_NAMES[date.getDay()];
  };
  getTimeSpan = function(date) {
    var nextWeekRange, nextWeekStart, nextYearRange, nextYearStart, now, range, result, theDayAfterTomorrowRange, theDayAfterTomorrowStart, thisWeekRange, thisWeekStart, thisYearRange, thisYearStart, todayRange, todayStart, tomorrowRange, tomorrowStart, yesterdayRange, yesterdayStart;
    now = new Date();
    range = (now.getTime() - date.getTime()) / SECOND_IN_MILLISECONDS;
    nextYearStart = new Date(now.getFullYear() + 1, 0, 1);
    nextWeekStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() + (7 - now.getDay()));
    tomorrowStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
    theDayAfterTomorrowStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 2);
    todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    yesterdayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
    thisWeekStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());
    thisYearStart = new Date(now.getFullYear(), 0, 1);
    nextYearRange = (now.getTime() - nextYearStart.getTime()) / SECOND_IN_MILLISECONDS;
    nextWeekRange = (now.getTime() - nextWeekStart.getTime()) / SECOND_IN_MILLISECONDS;
    theDayAfterTomorrowRange = (now.getTime() - theDayAfterTomorrowStart.getTime()) / SECOND_IN_MILLISECONDS;
    tomorrowRange = (now.getTime() - tomorrowStart.getTime()) / SECOND_IN_MILLISECONDS;
    todayRange = (now.getTime() - todayStart.getTime()) / SECOND_IN_MILLISECONDS;
    yesterdayRange = (now.getTime() - yesterdayStart.getTime()) / SECOND_IN_MILLISECONDS;
    thisWeekRange = (now.getTime() - thisWeekStart.getTime()) / SECOND_IN_MILLISECONDS;
    thisYearRange = (now.getTime() - thisYearStart.getTime()) / SECOND_IN_MILLISECONDS;
    if (range >= 0) {
      if (range < FEW_SECONDS) {
        result = "A few seconds ago";
      } else if (range < MINUTE_IN_SECONDS) {
        result = "" + (Math.floor(range)) + " seconds ago";
      } else if (range < MINUTE_IN_SECONDS * 2) {
        result = "About a minute ago";
      } else if (range < HOUR_IN_SECONDS) {
        result = "" + (Math.floor(range / MINUTE_IN_SECONDS)) + " minutes ago";
      } else if (range < HOUR_IN_SECONDS * 2) {
        result = "About an hour ago";
      } else if (range < todayRange) {
        result = "" + (Math.floor(range / HOUR_IN_SECONDS)) + " hours ago";
      } else if (range < yesterdayRange) {
        result = "Yesterday at " + (formatTime(date));
      } else if (range < thisWeekRange) {
        result = "" + (formatWeekday(date)) + " at " + (formatTime(date));
      } else if (range < thisYearRange) {
        result = "" + (formatMonth(date)) + " " + (date.getDate()) + " at " + (formatTime(date));
      } else {
        result = "" + (formatMonth(date)) + " " + (date.getDate()) + ", " + (date.getFullYear()) + " at " + (formatTime(date));
      }
    } else {
      if (range > -FEW_SECONDS) {
        result = "In a few seconds";
      } else if (range > -MINUTE_IN_SECONDS) {
        result = "In " + (Math.floor(-range)) + " seconds";
      } else if (range > -MINUTE_IN_SECONDS * 2) {
        result = "In about a minute";
      } else if (range > -HOUR_IN_SECONDS) {
        result = "In " + (Math.floor(-range / MINUTE_IN_SECONDS)) + " minutes";
      } else if (range > -HOUR_IN_SECONDS * 2) {
        result = "In about an hour";
      } else if (range > tomorrowRange) {
        result = "In " + (Math.floor(-range / HOUR_IN_SECONDS)) + " hours";
      } else if (range > theDayAfterTomorrowRange) {
        result = "Tomorrow at " + (formatTime(date));
      } else if (range > nextWeekRange) {
        result = "" + (formatWeekday(date)) + " at " + (formatTime(date));
      } else if (range > nextYearRange) {
        result = "" + (formatMonth(date)) + " " + (date.getDate()) + " at " + (formatTime(date));
      } else {
        result = "" + (formatMonth(date)) + " " + (date.getDate()) + ", " + (date.getFullYear()) + " at " + (formatTime(date));
      }
    }
    return result;
  };
  return getTimeSpan;
})();

formatRelativeTime = function(timestamp) {
  var date;
  date = new Date;
  date.setTime(timestamp);
  return getTimeSpan(date);
};

formatTime = function(timestamp) {
  var date;
  date = new Date;
  date.setTime(timestamp);
  return (date.getHours() % 12) + ':' + ('0' + date.getMinutes()).substr(-2, 2) + (date.getHours() > 12 ? "pm" : "am");
};

createStatSheet = function(user, full) {
  var body, row, table;
  table = $('<table>').addClass('table headless');
  body = $('<tbody>').appendTo(table);
  row = function(name, val) {
    return $('<tr>').appendTo(body).append($("<th>").text(name)).append($("<td>").addClass("value").append(val));
  };
  row("Score", $('<span>').addClass('badge').text(computeScore(user)));
  row("Correct", user.correct);
  row("Interrupts", user.interrupts);
  if (full) {
    row("Early", user.early);
  }
  if (full) {
    row("Incorrect", user.guesses - user.correct);
  }
  row("Guesses", user.guesses);
  row("Seen", user.seen);
  if (user.team) {
    row("Team", user.team);
  }
  if (full) {
    row("ID", user.id.slice(0, 10));
  }
  if (full) {
    row("Last Seen", formatRelativeTime(user.last_action));
  }
  return table;
};

renderState = function() {
  var active_count, attr, attrs, badge, entities, idle_count, list, member, members, name, ranking, row, team, team_count, team_hash, teams, user, user_index, val, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
  if (!sync.users) {
    return;
  }
  teams = {};
  team_hash = '';
  _ref = sync.users;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    user = _ref[_i];
    if (user.team) {
      if (!(user.team in teams)) {
        teams[user.team] = [];
      }
      teams[user.team].push(user.id);
      team_hash += user.team + user.id;
    }
    userSpan(user.id, true);
  }
  if ($('.teams').data('teamhash') !== team_hash) {
    $('.teams').data('teamhash', team_hash);
    $('.teams').empty();
    $('.teams')[0].options.add(new Option('Individual', ''));
    for (team in teams) {
      members = teams[team];
      $('.teams')[0].options.add(new Option("" + team + " (" + members.length + ")", team));
    }
    $('.teams')[0].options.add(new Option('Create Team', 'create'));
    if (public_id in users) {
      $('.teams').val(users[public_id].team);
    }
  }
  list = $('.leaderboard tbody');
  ranking = 1;
  entities = sync.users;
  team_count = 0;
  if ($('.teams').val() || public_id.slice(0, 2) === "__") {
    entities = (function() {
      var _j, _len1, _ref1, _results;
      _results = [];
      for (team in teams) {
        members = teams[team];
        attrs = {};
        team_count++;
        for (_j = 0, _len1 = members.length; _j < _len1; _j++) {
          member = members[_j];
          _ref1 = users[member];
          for (attr in _ref1) {
            val = _ref1[attr];
            if (typeof val === 'number') {
              if (!(attr in attrs)) {
                attrs[attr] = 0;
              }
              attrs[attr] += val;
            }
          }
        }
        attrs.id = 't-' + team.toLowerCase().replace(/[^a-z0-9]/g, '');
        attrs.members = members;
        attrs.name = team;
        _results.push(attrs);
      }
      return _results;
    })();
    _ref1 = sync.users;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      user = _ref1[_j];
      if (!user.team) {
        entities.push(user);
      }
    }
  }
  list.empty();
  _ref2 = entities.sort(function(a, b) {
    return computeScore(b) - computeScore(a);
  });
  for (user_index = _k = 0, _len2 = _ref2.length; _k < _len2; user_index = ++_k) {
    user = _ref2[user_index];
    if (entities[user_index - 1] && computeScore(user) < computeScore(entities[user_index - 1])) {
      ranking++;
    }
    row = $('<tr>').data('entity', user).appendTo(list);
    row.click(function() {
      return 1;
    });
    badge = $('<span>').addClass('badge pull-right').text(computeScore(user));
    if (__indexOf.call(user.members || [user.id], public_id) >= 0) {
      badge.addClass('badge-info').attr('title', 'You');
    } else {
      idle_count = 0;
      active_count = 0;
      _ref3 = user.members || [user.id];
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        member = _ref3[_l];
        if (users[member].online) {
          if (serverTime() - users[member].last_action > 1000 * 60 * 10) {
            idle_count++;
          } else {
            active_count++;
          }
        }
      }
      if (active_count > 0) {
        badge.addClass('badge-success').attr('title', 'Online');
      } else if (idle_count > 0) {
        badge.addClass('badge-warning').attr('title', 'Idle');
      }
    }
    $('<td>').addClass('rank').append(badge).append(ranking).appendTo(row);
    name = $('<td>').appendTo(row);
    $('<td>').text(user.interrupts).appendTo(row);
    if (!user.members) {
      name.append($('<span>').text(user.name));
    } else {
      name.append($('<span>').text(user.name).css('font-weight', 'bold')).append(" (" + user.members.length + ")");
      _ref4 = user.members.sort(function(a, b) {
        return computeScore(users[b]) - computeScore(users[a]);
      });
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        member = _ref4[_m];
        user = users[member];
        row = $('<tr>').addClass('subordinate').data('entity', user).appendTo(list);
        row.click(function() {
          return 1;
        });
        badge = $('<span>').addClass('badge pull-right').text(computeScore(user));
        if (user.id === public_id) {
          badge.addClass('badge-info').attr('title', 'You');
        } else {
          if (user.online) {
            if (serverTime() - user.last_action > 1000 * 60 * 10) {
              badge.addClass('badge-warning').attr('title', 'Idle');
            } else {
              badge.addClass('badge-success').attr('title', 'Online');
            }
          }
        }
        $('<td>').css("border", 0).append(badge).appendTo(row);
        name = $('<td>').text(user.name);
        name.appendTo(row);
        $('<td>').text(user.interrupts).appendTo(row);
      }
    }
  }
  if (sync.users.length > 1 && connected() || (sync.users.length === 1 && sync.users[0].id !== public_id && connected())) {
    if ($('.leaderboard').is(':hidden')) {
      $('.leaderboard').slideDown();
      $('.singleuser').slideUp();
    }
  } else if (users[public_id]) {
    $('.singleuser .stats table').replaceWith(createStatSheet(users[public_id], !!$('.singleuser').data('full')));
    if ($('.singleuser').is(':hidden')) {
      $('.leaderboard').slideUp();
      $('.singleuser').slideDown();
    }
  }
  checkAlone();
  return renderPartial();
};

checkAlone = function() {
  var active_count, user, _i, _len, _ref;
  if (!connected()) {
    return;
  }
  active_count = 0;
  _ref = sync.users;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    user = _ref[_i];
    if (user.online && serverTime() - user.last_action < 1000 * 60 * 10) {
      active_count++;
    }
  }
  if (active_count === 1) {
    return sock.emit('check_rooms', public_rooms, function(data) {
      var can, count, links, room, suggested_candidates;
      suggested_candidates = [];
      for (room in data) {
        count = data[room];
        if (count > 0 && room !== sync.name) {
          suggested_candidates.push(room);
        }
      }
      if (suggested_candidates.length > 0) {
        links = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = suggested_candidates.length; _j < _len1; _j++) {
            can = suggested_candidates[_j];
            _results.push(can.link("/" + can) + (" (" + data[can] + ") "));
          }
          return _results;
        })();
        $('.foreveralone .roomlist').html(links.join(' or '));
        return $('.foreveralone').slideDown();
      } else {
        return $('.foreveralone').slideUp();
      }
    });
  } else {
    return $('.foreveralone').slideUp();
  }
};

$('.singleuser').click(function() {
  return $('.singleuser .stats').slideUp().queue(function() {
    $('.singleuser').data('full', !$('.singleuser').data('full'));
    renderState();
    return $(this).dequeue().slideDown();
  });
});

lastRendering = 0;

renderPartial = function() {
  if (!sync.time_freeze || sync.attempt) {
    if (time() < sync.end_time) {
      requestAnimationFrame(renderPartial);
      if (new Date - lastRendering < 1000 / 20) {
        return;
      }
    }
  }
  lastRendering = +(new Date);
  if (!(sync.question && sync.timing)) {
    return;
  }
  if (sync.question !== last_question) {
    changeQuestion();
    last_question = sync.question;
  }
  if (!sync.time_freeze) {
    removeSplash();
  }
  updateTextPosition();
  return renderTimer();
};

updateTextAnnotations = function() {
  var bundle, children, early_index, element, elements, i, label_type, readout, spots, words, _i, _j, _ref, _ref1, _results;
  if (!(sync.question && sync.timing)) {
    return;
  }
  words = sync.question.split(' ');
  early_index = sync.question.replace(/[^ \*]/g, '').indexOf('*');
  bundle = $('#history .bundle.active');
  spots = bundle.data('starts') || [];
  readout = bundle.find('.readout .well');
  readout.data('spots', spots.join(','));
  children = readout.children();
  elements = [];
  for (i = _i = 0, _ref = words.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    element = $('<span>').addClass('unread');
    if (words[i].indexOf('*') !== -1) {
      element.append(" <span class='inline-icon'><span class='asterisk'>" + words[i] + "</span><i class='label icon-white icon-asterisk'></i></span> ");
    } else {
      element.append(words[i] + " ");
    }
    if (__indexOf.call(spots, i) >= 0) {
      label_type = 'label-important';
      if (i === words.length - 1) {
        label_type = "label-info";
      }
      if (early_index !== -1 && i < early_index) {
        label_type = "label";
      }
      element.append(" <span class='inline-icon'><i class='label icon-white icon-bell  " + label_type + "'></i></span> ");
    }
    elements.push(element);
  }
  _results = [];
  for (i = _j = 0, _ref1 = words.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
    if (children.eq(i).html() !== elements[i].html()) {
      if (children.eq(i).length > 0) {
        _results.push(children.eq(i).replaceWith(elements[i]));
      } else {
        _results.push(readout.append(elements[i]));
      }
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

updateTextPosition = function() {
  var bundle, children, cumulative, index, readout, timeDelta, words;
  if (!(sync.question && sync.timing)) {
    return;
  }
  timeDelta = time() - sync.begin_time;
  words = sync.question.split(' ');
  cumulative = cumsum(sync.timing, sync.rate);
  index = 0;
  while (timeDelta > cumulative[index]) {
    index++;
  }
  bundle = $('#history .bundle.active');
  readout = bundle.find('.readout .well');
  children = readout.children();
  if (children.length !== words.length) {
    updateTextAnnotations();
  }
  return children.slice(0, index).removeClass('unread');
};

window.requestAnimationFrame || (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
  return window.setTimeout(function() {
    return callback(+new Date());
  }, 1000 / 60);
});

renderTimer = function() {
  var cs, elapsed, min, ms, pad, progress, ruling, sec, sign;
  if (connected()) {
    $('.offline').fadeOut();
  } else {
    $('.offline').fadeIn();
  }
  if (sync.time_freeze) {
    $('.buzzbtn').disable(true);
    if (sync.attempt) {
      (function() {
        var cumulative, del, i, starts, _ref;
        cumulative = cumsum(sync.timing, sync.rate);
        del = sync.attempt.start - sync.begin_time;
        i = 0;
        while (del > cumulative[i]) {
          i++;
        }
        starts = $('.bundle.active').data('starts') || [];
        if (_ref = i - 1, __indexOf.call(starts, _ref) < 0) {
          starts.push(i - 1);
        }
        return $('.bundle.active').data('starts', starts);
      })();
      $('.label.pause').hide();
      $('.label.buzz').fadeIn();
    } else {
      $('.label.pause').fadeIn();
      $('.label.buzz').hide();
    }
    if ($('.pausebtn').hasClass('btn-warning')) {
      $('.pausebtn .resume').show();
      $('.pausebtn .pause').hide();
      $('.pausebtn').addClass('btn-success').removeClass('btn-warning');
    }
  } else {
    $('.label.pause').fadeOut();
    $('.label.buzz').fadeOut();
    if ($('.pausebtn').hasClass('btn-success')) {
      $('.pausebtn .resume').hide();
      $('.pausebtn .pause').show();
      $('.pausebtn').addClass('btn-warning').removeClass('btn-success');
    }
  }
  if (time() > sync.end_time - sync.answer_duration) {
    if ($(".nextbtn").is(":hidden")) {
      $('.nextbtn').show();
      $('.skipbtn').hide();
    }
  } else {
    if ($(".skipbtn").is(":hidden")) {
      $('.nextbtn').hide();
      $('.skipbtn').show();
    }
  }
  $('.timer').toggleClass('buzz', !!sync.attempt);
  $('.progress').toggleClass('progress-warning', !!(sync.time_freeze && !sync.attempt));
  $('.progress').toggleClass('active progress-danger', !!sync.attempt);
  if (sync.attempt) {
    elapsed = serverTime() - sync.attempt.realTime;
    ms = sync.attempt.duration - elapsed;
    progress = elapsed / sync.attempt.duration;
    $('.pausebtn, .buzzbtn, .skipbtn, .nextbtn').disable(true);
  } else {
    ms = sync.end_time - time();
    elapsed = time() - sync.begin_time;
    progress = elapsed / (sync.end_time - sync.begin_time);
    $('.skipbtn, .nextbtn').disable(false);
    $('.pausebtn').disable(ms < 0);
    if (!sync.time_freeze) {
      $('.buzzbtn').disable(ms < 0 || elapsed < 100);
    }
    if (ms < 0) {
      $('.bundle.active').find('.answer').css('display', 'inline').css('visibility', 'visible');
      ruling = $('.bundle.active').find('.ruling');
      if (!ruling.data('shown_tooltip')) {
        ruling.data('shown_tooltip', true);
        $('.bundle.active').find('.ruling').first().tooltip({
          trigger: "manual"
        }).tooltip('show');
      }
    }
  }
  if ($('.progress .bar').hasClass('pull-right')) {
    $('.progress .bar').width((1 - progress) * 100 + '%');
  } else {
    $('.progress .bar').width(progress * 100 + '%');
  }
  ms = Math.max(0, ms);
  sign = "";
  if (ms < 0) {
    sign = "+";
  }
  sec = Math.abs(ms) / 1000;
  cs = (sec % 1).toFixed(1).slice(1);
  $('.timer .fraction').text(cs);
  min = sec / 60;
  pad = function(num) {
    var str;
    str = Math.floor(num).toString();
    while (str.length < 2) {
      str = '0' + str;
    }
    return str;
  };
  return $('.timer .face').text(sign + pad(min) + ':' + pad(sec % 60));
};

removeSplash = function(fn) {
  var bundle, start;
  start = $('.bundle .start-page');
  bundle = start.parent(".bundle");
  if (start.length > 0) {
    bundle.find('.readout').width(start.width()).slideDown('normal', function() {
      return $(this).width('auto');
    });
    return start.slideUp('normal', function() {
      start.remove();
      if (fn) {
        return fn();
      }
    });
  } else {
    if (fn) {
      return fn();
    }
  }
};

changeQuestion = function() {
  var bundle, cutoff, nested, old, start, well;
  cutoff = 15;
  if (mobileLayout()) {
    cutoff = 1;
  }
  $('.bundle .ruling').tooltip('destroy');
  $('.bundle:not(.bookmarked)').slice(cutoff).slideUp('normal', function() {
    return $(this).remove();
  });
  old = $('#history .bundle').first();
  old.removeClass('active');
  old.find('.breadcrumb').click(function() {
    return 1;
  });
  bundle = createBundle().width($('#history').width());
  bundle.addClass('active');
  $('#history').prepend(bundle.hide());
  updateTextPosition();
  if (!last_question && sync.time_freeze && sync.time_freeze - sync.begin_time < 500) {
    start = $('<div>').addClass('start-page');
    well = $('<div>').addClass('well').appendTo(start);
    $('<button>').addClass('btn btn-success btn-large').text('Start the Question').appendTo(well).click(function() {
      return removeSplash(function() {
        return $('.pausebtn').click();
      });
    });
    bundle.find('.readout').hide().before(start);
  }
  bundle.slideDown("normal").queue(function() {
    bundle.width('auto');
    return $(this).dequeue();
  });
  if (old.find('.readout').length > 0) {
    nested = old.find('.readout .well>span');
    old.find('.readout .well').append(nested.contents());
    nested.remove();
    old.find('.readout')[0].normalize();
    return old.queue(function() {
      old.find('.readout').slideUp("normal");
      return $(this).dequeue();
    });
  }
};

createAlert = function(bundle, title, message) {
  var div;
  div = $("<div>").addClass("alert alert-success").insertAfter(bundle.find(".annotations")).hide();
  div.append($("<button>").attr("data-dismiss", "alert").attr("type", "button").html("&times;").addClass("close"));
  div.append($("<strong>").text(title));
  div.append(" ");
  div.append(message);
  div.slideDown();
  return setTimeout(function() {
    return div.slideUp().queue(function() {
      $(this).dequeue();
      return $(this).remove();
    });
  }, 5000);
};

createBundle = function() {
  var addInfo, annotations, breadcrumb, bundle, important, readout, star, well, _ref;
  bundle = $('<div>').addClass('bundle').attr('name', sync.qid).addClass('room-' + ((_ref = sync.name) != null ? _ref.replace(/[^a-z0-9]/g, '') : void 0));
  important = $('<div>').addClass('important');
  bundle.append(important);
  breadcrumb = $('<ul>');
  star = $('<a>', {
    href: "#",
    rel: "tooltip",
    title: "Bookmark this question"
  }).addClass('icon-star-empty bookmark').click(function(e) {
    bundle.toggleClass('bookmarked');
    star.toggleClass('icon-star-empty', !bundle.hasClass('bookmarked'));
    star.toggleClass('icon-star', bundle.hasClass('bookmarked'));
    e.stopPropagation();
    return e.preventDefault();
  });
  breadcrumb.append($('<li>').addClass('pull-right').append(star));
  addInfo = function(name, value) {
    var el;
    breadcrumb.find('li:not(.pull-right)').last().append($('<span>').addClass('divider').text('/'));
    if (value) {
      name += ": " + value;
    }
    el = $('<li>').text(name).appendTo(breadcrumb);
    if (value) {
      return el.addClass('hidden-phone');
    } else {
      return el.addClass('visible-phone');
    }
  };
  if ((public_id + '').slice(0, 2) === "__") {
    addInfo('Room', sync.name);
  }
  addInfo('Category', sync.info.category);
  addInfo('Difficulty', sync.info.difficulty);
  addInfo('Tournament', sync.info.year + ' ' + sync.info.tournament);
  addInfo(sync.info.year + ' ' + sync.info.difficulty + ' ' + sync.info.category);
  breadcrumb.find('li').last().append($('<span>').addClass('divider hidden-phone').text('/'));
  bundle.data('report_info', {
    year: sync.info.year,
    difficulty: sync.info.difficulty,
    category: sync.info.category,
    tournament: sync.info.turnament,
    round: sync.info.round,
    num: sync.info.num,
    question: sync.question,
    answer: sync.answer
  });
  breadcrumb.append($('<li>').addClass('clickable hidden-phone').text('Report').click(function(e) {
    var cat, cat_list, controls, ctype, div, form, info, option, rtype, stype, _i, _j, _len, _len1, _ref1, _ref2;
    info = bundle.data('report_info');
    div = $("<div>").addClass("alert alert-block alert-info").insertBefore(bundle.find(".annotations")).hide();
    div.append($("<button>").attr("data-dismiss", "alert").attr("type", "button").html("&times;").addClass("close"));
    div.append($("<h4>").text("Report Question"));
    form = document.createElement('form');
    $(form).addClass('form-horizontal').appendTo(div);
    rtype = $('<div>').addClass('control-group').appendTo(form);
    rtype.append($("<label>").addClass('control-label').text('Description'));
    controls = $("<div>").addClass('controls').appendTo(rtype);
    _ref1 = ["Wrong category", "Wrong details", "Bad question", "Broken formatting"];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      option = _ref1[_i];
      controls.append($("<label>").addClass("radio").append($("<input type=radio name=description>").val(option)).append(option));
    }
    ctype = $('<div>').addClass('control-group').appendTo(form);
    ctype.append($("<label>").addClass('control-label').text('Category'));
    cat_list = $('<select>');
    ctype.append($("<div>").addClass('controls').append(cat_list));
    controls.find('input:radio')[0].checked = true;
    _ref2 = sync.categories;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      cat = _ref2[_j];
      cat_list.append(new Option(cat));
    }
    cat_list.val(info.category);
    stype = $('<div>').addClass('control-group').appendTo(form);
    $("<div>").addClass('controls').appendTo(stype).append($('<button type=submit>').addClass('btn btn-primary').text('Submit'));
    $(form).submit(function() {
      console.log('on submit');
      return false;
    });
    div.slideDown();
    e.stopPropagation();
    return e.preventDefault();
  }));
  breadcrumb.append($('<li>').addClass('pull-right answer').text(sync.answer));
  readout = $('<div>').addClass('readout');
  well = $('<div>').addClass('well').appendTo(readout);
  well.append($('<span>').addClass('unread').text(sync.question));
  annotations = $('<div>').addClass('annotations');
  return bundle.append($('<ul>').addClass('breadcrumb').append(breadcrumb)).append(readout).append(annotations);
};

userSpan = function(user, global) {
  var c, el, hash, prefix, scope, text, _i, _j, _len, _len1, _ref, _ref1, _ref2;
  prefix = '';
  if (public_id && public_id.slice(0, 2) === "__") {
    prefix = (((_ref = users[user]) != null ? _ref.room : void 0) || 'unknown') + '/';
  }
  text = '';
  if (user.slice(0, 2) === "__") {
    text = prefix + user.slice(2);
  } else {
    text = prefix + (((_ref1 = users[user]) != null ? _ref1.name : void 0) || "[name missing]");
  }
  hash = 'userhash-' + escape(text).toLowerCase().replace(/[^a-z0-9]/g, '');
  if (global) {
    scope = $(".user-" + user + ":not(." + hash + ")");
    for (_i = 0, _len = scope.length; _i < _len; _i++) {
      el = scope[_i];
      _ref2 = $(el).attr('class').split('\s');
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        c = _ref2[_j];
        if (c.slice(0, 8) === 'userhash') {
          $(el).removeClass(c);
        }
      }
    }
  } else {
    scope = $('<span>');
  }
  return scope.addClass(hash).addClass('user-' + user).addClass('username').text(text);
};

addAnnotation = function(el, name) {
  var current_bundle;
  if (name == null) {
    name = sync.name;
  }
  $('.bundle .ruling').tooltip('destroy');
  current_bundle = $('.room-' + (name || '').replace(/[^a-z0-9]/g, ''));
  if (current_bundle.length === 0) {
    current_bundle = $('#history .bundle.active');
  }
  el.css('display', 'none').prependTo(current_bundle.eq(0).find('.annotations'));
  el.slideDown();
  return el;
};

addImportant = function(el) {
  $('.bundle .ruling').tooltip('destroy');
  el.css('display', 'none').prependTo($('#history .bundle.active .important'));
  el.slideDown();
  return el;
};

guessAnnotation = function(_arg) {
  var answer, checkScoreUpdate, correct, decision, done, early, id, interrupt, line, marker, old_score, prompt, prompt_el, ruling, session, text, user;
  session = _arg.session, text = _arg.text, user = _arg.user, done = _arg.done, correct = _arg.correct, interrupt = _arg.interrupt, early = _arg.early, prompt = _arg.prompt;
  id = "" + user + "-" + session + "-" + (prompt ? 'prompt' : 'guess');
  if ($('#' + id).length > 0) {
    line = $('#' + id);
  } else {
    line = $('<p>').attr('id', id);
    if (prompt) {
      prompt_el = $('<a>').addClass('label prompt label-info').text('Prompt');
      line.append(' ');
      line.append(prompt_el);
    } else {
      marker = $('<span>').addClass('label').text("Buzz");
      if (early) {

      } else if (interrupt) {
        marker.addClass('label-important');
      } else {
        marker.addClass('label-info');
      }
      line.append(marker);
    }
    line.append(" ");
    line.append(userSpan(user).addClass('author'));
    line.append(document.createTextNode(' '));
    $('<span>').addClass('comment').appendTo(line);
    ruling = $('<a>').addClass('label ruling').hide().attr('href', '#').attr('title', 'Click to Report').data('placement', 'right');
    line.append(' ');
    line.append(ruling);
    line.css('display', 'none').prependTo($('#history .bundle[name="' + sync.qid + '"]').eq(0).find('.annotations'));
    line.slideDown();
  }
  if (done) {
    if (text === '') {
      line.find('.comment').html('<em>(blank)</em>');
    } else {
      line.find('.comment').text(text);
    }
  } else {
    line.find('.comment').text(text);
  }
  if (done) {
    ruling = line.find('.ruling').show().css('display', 'inline');
    decision = "";
    if (correct === "prompt") {
      ruling.addClass('label-info').text('Prompt');
      decision = "prompt";
    } else if (correct) {
      decision = "correct";
      ruling.addClass('label-success').text('Correct');
      if (user === public_id) {
        old_score = computeScore(users[public_id]);
        checkScoreUpdate = function() {
          var magic_multiple, magic_number, updated_score;
          updated_score = computeScore(users[public_id]);
          if (updated_score === old_score) {
            setTimeout(checkScoreUpdate, 100);
            return;
          }
          magic_multiple = 1000;
          magic_number = Math.round(old_score / magic_multiple) * magic_multiple;
          if (magic_number === 0) {
            return;
          }
          if (magic_number > 0) {
            if (old_score < magic_number && updated_score >= magic_number) {
              $('body').fireworks(magic_number / magic_multiple * 10);
              return createAlert(ruling.parents('.bundle'), 'Congratulations', "You have over " + magic_number + " points! Here's some fireworks.");
            }
          }
        };
        checkScoreUpdate();
      }
    } else {
      decision = "wrong";
      ruling.addClass('label-warning').text('Wrong');
      if (user === public_id && public_id in users) {
        old_score = computeScore(users[public_id]);
        if (old_score < -100) {
          createAlert(ruling.parents('.bundle'), 'you suck', 'like seriously you really really suck. you are a turd.');
        }
      }
    }
    answer = sync.answer;
    ruling.click(function() {
      sock.emit('report_answer', {
        guess: text,
        answer: answer,
        ruling: decision
      });
      createAlert(ruling.parents('.bundle'), 'Reported Answer', "You have successfully told me that my algorithm sucks. Thanks, I'll fix it eventually. ");
      return false;
    });
    if (actionMode === 'guess') {
      setActionMode('');
    }
  }
  return line;
};

chatAnnotation = function(_arg) {
  var done, html, id, line, session, text, time, url_regex, user, _ref;
  session = _arg.session, text = _arg.text, user = _arg.user, done = _arg.done, time = _arg.time;
  id = user + '-' + session;
  if ($('#' + id).length > 0) {
    line = $('#' + id);
  } else {
    line = $('<p>').attr('id', id);
    line.append(userSpan(user).addClass('author').attr('title', formatTime(time)));
    line.append(document.createTextNode(' '));
    $('<span>').addClass('comment').appendTo(line);
    addAnnotation(line, (_ref = users[user]) != null ? _ref.room : void 0);
  }
  url_regex = /\b((?:https?:\/\/|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  html = text.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(^|\s+)(\/[a-z0-9\-]+)(\s+|$)/g, function(all, pre, room, post) {
    return pre + ("<a href='" + room + "'>" + room + "</a>") + post;
  }).replace(url_regex, function(url) {
    var real_url;
    real_url = url;
    if (!/:\//.test(url)) {
      real_url = "http://" + url;
    }
    if (/\.(jpe?g|gif|png)$/.test(url)) {
      return "<img src='" + real_url + "' alt='" + url + "'>";
    } else {
      return "<a href='" + real_url + "' target='_blank'>" + url + "</a>";
    }
  });
  if (done) {
    line.removeClass('buffer');
    if (text === '') {
      line.find('.comment').html('<em>(no message)</em>');
    } else {
      line.find('.comment').html(html);
    }
  } else {
    if (!$('.livechat')[0].checked || text === '(typing)') {
      line.addClass('buffer');
      line.find('.comment').text(' is typing...');
    } else {
      line.removeClass('buffer');
      line.find('.comment').html(html);
    }
  }
  return line.toggleClass('typing', !done);
};

sock.on('log', function(_arg) {
  var line, user, verb;
  user = _arg.user, verb = _arg.verb;
  line = $('<p>').addClass('log');
  if (user) {
    line.append(userSpan(user));
    line.append(" " + verb);
  } else {
    line.append(verb);
  }
  return addAnnotation(line);
});

jQuery('.bundle .breadcrumb').live('click', function() {
  var readout;
  if (!$(this).is(jQuery('.bundle .breadcrumb').first())) {
    readout = $(this).parent().find('.readout');
    return readout.width($('#history').width()).slideToggle("normal", function() {
      return readout.width('auto');
    });
  }
});

actionMode = '';

setActionMode = function(mode) {
  actionMode = mode;
  $('.prompt_input, .guess_input, .chat_input').blur();
  $('.actionbar').toggle(mode === '');
  $('.chat_form').toggle(mode === 'chat');
  $('.guess_form').toggle(mode === 'guess');
  $('.prompt_form').toggle(mode === 'prompt');
  return $(window).resize();
};

$('.chatbtn').click(function() {
  setActionMode('chat');
  return $('.chat_input').data('input_session', Math.random().toString(36).slice(3)).data('begin_time', +(new Date)).val('').focus().keyup();
});

recent_actions = [0];

rate_limit_ceiling = 0;

rate_limit_check = function() {
  var action, current_time, filtered_actions, online_count, rate_limited, rate_threshold, user, _i, _len;
  online_count = ((function() {
    var _i, _len, _ref, _results;
    _ref = sync.users;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      user = _ref[_i];
      if (user.online && user.last_action > new Date - 1000 * 60 * 10) {
        _results.push(user);
      }
    }
    return _results;
  })()).length;
  rate_threshold = 7;
  if (online_count > 1) {
    rate_threshold = 3;
  }
  current_time = +(new Date);
  filtered_actions = [];
  rate_limited = false;
  for (_i = 0, _len = recent_actions.length; _i < _len; _i++) {
    action = recent_actions[_i];
    if (current_time - action < 5000) {
      filtered_actions.push(action);
    }
  }
  if (filtered_actions.length >= rate_threshold) {
    rate_limited = true;
  }
  if (rate_limit_ceiling > current_time) {
    rate_limited = true;
  }
  recent_actions = filtered_actions.slice(-10);
  recent_actions.push(current_time);
  if (rate_limited) {
    rate_limit_ceiling = current_time + 5000;
    createAlert($('.bundle.active'), 'Rate Limited', "You been rate limited for doing too many things in the past five seconds. ");
  }
  return rate_limited;
};

skip = function() {
  removeSplash();
  if (rate_limit_check()) {
    return;
  }
  return sock.emit('skip', 'yay');
};

next = function() {
  removeSplash();
  return sock.emit('next', 'yay');
};

$('.skipbtn').click(skip);

$('.nextbtn').click(next);

try {
  ding_sound = new Audio('img/ding.wav');
} catch (e) {

}

$('.buzzbtn').click(function() {
  var submit_time;
  if ($('.buzzbtn').attr('disabled') === 'disabled') {
    return;
  }
  if (rate_limit_check()) {
    return;
  }
  setActionMode('guess');
  $('.guess_input').val('').addClass('disabled').focus();
  submit_time = +(new Date);
  return sock.emit('buzz', 'yay', function(status) {
    if (status === 'http://www.whosawesome.com/') {
      $('.guess_input').removeClass('disabled');
      if ($('.sounds')[0].checked) {
        if (ding_sound) {
          ding_sound.play();
        }
      }
      if (window._gaq) {
        return _gaq.push(['_trackEvent', 'Game', 'Response Latency', 'Buzz Accepted', new Date - submit_time]);
      }
    } else {
      setActionMode('');
      if (window._gaq) {
        return _gaq.push(['_trackEvent', 'Game', 'Response Latency', 'Buzz Rejected', new Date - submit_time]);
      }
    }
  });
});

$('.score-reset').click(function() {
  return sock.emit('resetscore', 'yay');
});

$('.pausebtn').click(function() {
  return removeSplash(function() {
    if (!!sync.time_freeze) {
      return sock.emit('unpause', 'yay');
    } else {
      return sock.emit('pause', 'yay');
    }
  });
});

$('.chat_input').keydown(function(e) {
  var _ref, _ref1;
  if (((_ref = e.keyCode) === 47 || _ref === 111 || _ref === 191) && $(this).val().length === 0 && !e.shiftKey) {
    e.preventDefault();
  }
  if ((_ref1 = e.keyCode) === 27) {
    return $('.chat_form').submit();
  }
});

$('input').keydown(function(e) {
  e.stopPropagation();
  if ($(this).hasClass("disabled")) {
    return e.preventDefault();
  }
});

$('.chat_input').keyup(function(e) {
  if (e.keyCode === 13) {
    return;
  }
  if ($('.livechat')[0].checked) {
    return sock.emit('chat', {
      text: $('.chat_input').val(),
      session: $('.chat_input').data('input_session'),
      done: false
    });
  } else if ($('.chat_input').data('sent_typing') !== $('.chat_input').data('input_session')) {
    sock.emit('chat', {
      text: '(typing)',
      session: $('.chat_input').data('input_session'),
      done: false
    });
    return $('.chat_input').data('sent_typing', $('.chat_input').data('input_session'));
  }
});

$('.chat_form').submit(function(e) {
  var time_delta;
  sock.emit('chat', {
    text: $('.chat_input').val(),
    session: $('.chat_input').data('input_session'),
    done: true
  });
  e.preventDefault();
  setActionMode('');
  time_delta = new Date - $('.chat_input').data('begin_time');
  if (window._gaq) {
    return _gaq.push(['_trackEvent', 'Chat', 'Typing Time', 'Posted Message', time_delta]);
  }
});

$('.guess_input').keyup(function(e) {
  if (e.keyCode === 13) {
    return;
  }
  return sock.emit('guess', {
    text: $('.guess_input').val(),
    done: false
  });
});

$('.guess_form').submit(function(e) {
  sock.emit('guess', {
    text: $('.guess_input').val(),
    done: true
  });
  e.preventDefault();
  return setActionMode('');
});

$('.prompt_input').keyup(function(e) {
  if (e.keyCode === 13) {
    return;
  }
  return sock.emit('guess', {
    text: $('.prompt_input').val(),
    done: false
  });
});

$('.prompt_form').submit(function(e) {
  sock.emit('guess', {
    text: $('.prompt_input').val(),
    done: true
  });
  e.preventDefault();
  return setActionMode('');
});

$('body').keydown(function(e) {
  var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
  if (actionMode === 'chat') {
    return $('.chat_input').focus();
  }
  if (actionMode === 'guess') {
    return $('.guess_input').focus();
  }
  if (e.shiftKey || e.ctrlKey || e.metaKey) {
    return;
  }
  if (e.keyCode === 32) {
    e.preventDefault();
    if ($('.bundle .start-page').length === 1) {
      return $('.pausebtn').click();
    } else {
      return $('.buzzbtn').click();
    }
  } else if ((_ref = e.keyCode) === 83) {
    return skip();
  } else if ((_ref1 = e.keyCode) === 78 || _ref1 === 74) {
    return next();
  } else if ((_ref2 = e.keyCode) === 80 || _ref2 === 82) {
    return $('.pausebtn').click();
  } else if ((_ref3 = e.keyCode) === 47 || _ref3 === 111 || _ref3 === 191 || _ref3 === 67 || _ref3 === 65) {
    e.preventDefault();
    return $('.chatbtn').click();
  } else if ((_ref4 = e.keyCode) === 70) {
    return sock.emit('finish', 'yay');
  } else if ((_ref5 = e.keyCode) === 66) {
    return $('.bundle.active .bookmark').click();
  }
});

$('.speed').change(function() {
  var rate;
  $('.speed').not(this).val($(this).val());
  $('.speed').data("last_update", +(new Date));
  rate = 1000 * 60 / 5 / Math.round($(this).val());
  return sock.emit('speed', rate);
});

$('.categories').change(function() {
  if ($('.categories').val() === 'custom') {
    createCategoryList();
    $('.custom-category').slideDown();
  } else {
    $('.custom-category').slideUp();
  }
  return sock.emit('category', $('.categories').val());
});

$('.difficulties').change(function() {
  return sock.emit('difficulty', $('.difficulties').val());
});

$('.teams').change(function() {
  if ($('.teams').val() === 'create') {
    return sock.emit('team', prompt('Enter Team Name') || '');
  } else {
    return sock.emit('team', $('.teams').val());
  }
});

$('.multibuzz').change(function() {
  return sock.emit('max_buzz', ($('.multibuzz')[0].checked ? null : 1));
});

$('.livechat').change(function() {
  return sock.emit('show_typing', $('.livechat')[0].checked);
});

$('.sounds').change(function() {
  return sock.emit('sounds', $('.sounds')[0].checked);
});

jQuery.fn.fireworks = function(times) {
  var duration, i, _i, _results,
    _this = this;
  if (times == null) {
    times = 5;
  }
  _results = [];
  for (i = _i = 0; 0 <= times ? _i < times : _i > times; i = 0 <= times ? ++_i : --_i) {
    duration = Math.random() * 2000;
    _results.push(this.delay(duration).queue(function() {
      var ang, color, end_size, j, left, seconds, size, speed, top, vx, vy, _j, _ref, _results1;
      _ref = _this.position(), top = _ref.top, left = _ref.left;
      left += jQuery(window).width() * Math.random();
      top += jQuery(window).height() * Math.random();
      color = '#' + Math.random().toString(16).slice(2, 8);
      _this.dequeue();
      _results1 = [];
      for (j = _j = 0; _j < 50; j = ++_j) {
        ang = Math.random() * 6.294;
        speed = Math.min(100, 150 * Math.random());
        vx = speed * Math.cos(ang);
        vy = speed * Math.sin(ang);
        seconds = 2 * Math.random();
        size = 5;
        end_size = Math.random() * size;
        _results1.push(jQuery('<div>').css({
          "position": 'fixed',
          "background-color": color,
          'width': size,
          'height': size,
          'border-radius': size,
          'top': top,
          'left': left
        }).appendTo('body').animate({
          left: "+=" + (vx * seconds),
          top: "+=" + (vy * seconds),
          width: end_size,
          height: end_size
        }, {
          duration: seconds * 1000,
          complete: function() {
            return $(this).remove();
          }
        }));
      }
      return _results1;
    }));
  }
  return _results;
};

$(window).resize(function() {
  return $('.expando').each(function() {
    var add, i, input, outer, size;
    add = sum((function() {
      var _i, _len, _ref, _results;
      _ref = $(this).find('.add-on, .padd-on');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push($(i).outerWidth());
      }
      return _results;
    }).call(this));
    size = $(this).width();
    input = $(this).find('input, .input');
    if (input.hasClass('input')) {
      outer = 0;
    } else {
      outer = input.outerWidth() - input.width();
    }
    if (Modernizr.csscalc) {
      input.css('width', "-webkit-calc(100% - " + (outer + add) + "px)");
      input.css('width', "-moz-calc(100% - " + (outer + add) + "px)");
      input.css('width', "-o-calc(100% - " + (outer + add) + "px)");
      return input.css('width', "calc(100% - " + (outer + add) + "px)");
    } else {
      return input.width(size - outer - add);
    }
  });
});

$(window).resize();

setTimeout(function() {
  return $(window).resize();
}, 762);

setTimeout(function() {
  return $(window).resize();
}, 2718);

setTimeout(function() {
  return $(window).resize();
}, 6022);

if (!Modernizr.touch && !mobileLayout()) {
  $('.actionbar button').tooltip();
  $('.actionbar button').click(function() {
    return $('.actionbar button').tooltip('hide');
  });
  $('#history, .settings').tooltip({
    selector: "[rel=tooltip]",
    placement: function() {
      if (mobileLayout()) {
        return "error";
      } else {
        return "left";
      }
    }
  });
}

$('body').click(function(e) {
  if ($(e.target).parents('.leaderboard, .popover').length === 0) {
    return $('.popover').remove();
  }
});

$(".leaderboard tbody tr").live('click', function(e) {
  var enabled, user, _ref;
  user = $(this).data('entity');
  enabled = (_ref = $(this).data('popover')) != null ? _ref.enabled : void 0;
  $('.leaderboard tbody tr').popover('destroy');
  if (!enabled) {
    $(this).popover({
      placement: mobileLayout() ? "top" : "left",
      trigger: "manual",
      title: "" + user.name + "'s Stats",
      content: function() {
        return createStatSheet(user, true);
      }
    });
    return $(this).popover('toggle');
  }
});

if (Modernizr.touch) {
  $('.show-keyboard').hide();
  $('.show-touch').show();
} else {
  $('.show-keyboard').show();
  $('.show-touch').hide();
}

handleCacheEvent = function() {
  var status;
  status = applicationCache.status;
  switch (applicationCache.status) {
    case applicationCache.UPDATEREADY:
      $('#cachestatus').text('Updated');
      console.log('update is ready');
      applicationCache.swapCache();
      $('#update').slideDown();
      if (localStorage.auto_reload === "yay") {
        return setTimeout(function() {
          return location.reload();
        }, 500);
      }
      break;
    case applicationCache.UNCACHED:
      return $('#cachestatus').text('Uncached');
    case applicationCache.OBSOLETE:
      return $('#cachestatus').text('Obsolete');
    case applicationCache.IDLE:
      return $('#cachestatus').text('Cached');
    case applicationCache.DOWNLOADING:
      return $('#cachestatus').text('Downloading');
    case applicationCache.CHECKING:
      return $('#cachestatus').text('Checking');
  }
};

(function() {
  var name, _i, _len, _ref, _results;
  if (window.applicationCache) {
    _ref = ['cached', 'checking', 'downloading', 'error', 'noupdate', 'obsolete', 'progress', 'updateready'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push(applicationCache.addEventListener(name, handleCacheEvent));
    }
    return _results;
  }
})();

setTimeout(function() {
  var deps, loadNextResource;
  window.exports = {};
  window.require = function() {
    return window.exports;
  };
  deps = ["html5slider", "levenshtein", "removeDiacritics", "porter", "answerparse", "syllable", "names", "offline"];
  loadNextResource = function() {
    return $.ajax({
      url: "lib/" + (deps.shift()) + ".js",
      cache: true,
      dataType: "script",
      success: function() {
        if (deps.length > 0) {
          return loadNextResource();
        }
      }
    });
  };
  return loadNextResource();
}, 10);
