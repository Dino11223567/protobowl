// Generated by CoffeeScript 1.3.3
var addAnnotation, avg, changeQuestion, chatAnnotation, createBundle, cumsum, generateName, is_touch, last_question, public_name, renderPartial, renderState, renderTimer, sock, sync, sync_offset, sync_offsets, time,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

sock = io.connect();

sync = {};

sync_offsets = [];

sync_offset = 0;

is_touch = !!(__indexOf.call(window, 'ontouchstart') >= 0);

$('html').toggleClass('touchscreen', is_touch);

generateName = function() {
  var adjective, animal, pick;
  adjective = 'flaming,aberrant,agressive,warty,hoary,breezy,dapper,edgy,feisty,gutsy,hardy,intrepid,jaunty,karmic,lucid,maverick,natty,oneric,precise,quantal,quizzical,curious,derisive,bodacious,nefarious';
  animal = 'monkey,axolotl,warthog,hedgehog,badger,drake,fawn,gibbon,heron,ibex,jackalope,koala,lynx,meerkat,narwhal,ocelot,penguin,quetzal,kodiak,cheetah,puma,jaguar,panther,tiger,leopard,lion,neandertal';
  pick = function(list) {
    var n;
    n = list.split(',');
    return n[Math.floor(n.length * Math.random())];
  };
  return pick(adjective) + " " + pick(animal);
};

public_name = generateName();

$('#username').val(public_name);

$('#username').keydown(function(e) {
  return e.stopPropagation();
});

$('#username').keyup(function() {
  console.log('renaming');
  return sock.emit('rename', $(this).val());
});

avg = function(list) {
  var item, sum, _i, _len;
  sum = 0;
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    item = list[_i];
    sum += item;
  }
  return sum / list.length;
};

cumsum = function(list, rate) {
  var num, sum, _i, _len, _results;
  sum = 0;
  _results = [];
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    num = list[_i];
    _results.push(sum += Math.round(num) * rate);
  }
  return _results;
};

time = function() {
  if (sync.time_freeze) {
    return sync.time_freeze;
  } else {
    return new Date - sync_offset - sync.time_offset;
  }
};

window.onbeforeunload = function() {
  localStorage.old_socket = sock.socket.sessionid;
  return null;
};

sock.on('echo', function(data, fn) {
  return fn('alive');
});

sock.on('disconnect', function() {
  return setTimeout(function() {
    return $('#disco').modal('show');
  }, 500);
});

sock.on('connect', function() {
  return sock.emit('join', {
    old_socket: localStorage.old_socket,
    room_name: channel_name,
    public_name: public_name
  });
});

sock.on('sync', function(data) {
  var attr, below, item, thresh;
  sync_offsets.push(+(new Date) - data.real_time);
  thresh = avg(sync_offsets);
  below = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = sync_offsets.length; _i < _len; _i++) {
      item = sync_offsets[_i];
      if (item <= thresh) {
        _results.push(item);
      }
    }
    return _results;
  })();
  sync_offset = avg(below);
  console.log('sync', data);
  for (attr in data) {
    sync[attr] = data[attr];
  }
  return renderState();
});

last_question = null;

renderState = function() {
  var action, count, list, row, user, votes, _i, _j, _len, _len1, _ref, _ref1, _ref2;
  if (sync.users) {
    _ref = sync.users;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      user = _ref[_i];
      votes = [];
      for (action in sync.voting) {
        if (_ref1 = user.id, __indexOf.call(sync.voting[action], _ref1) >= 0) {
          votes.push(action);
        }
      }
      user.votes = votes.join(', ');
    }
    list = $('.leaderboard tbody');
    count = 0;
    list.find('tr').addClass('to_remove');
    _ref2 = sync.users;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      user = _ref2[_j];
      count++;
      row = list.find('.sockid-' + user.id);
      if (row.length < 1) {
        console.log('recreating user');
        row = $('<tr>').appendTo(list);
      }
      row.find('td').remove();
      row.addClass('sockid-' + user.id);
      row.removeClass('to_remove');
      $('<td>').text(count).appendTo(row);
      $('<td>').text(user.name).appendTo(row);
      $('<td>').text(user.votes || 0).appendTo(row);
      $('<td>').text(7).appendTo(row);
      row.popover({
        placement: 'left',
        title: user.name + "'s stats",
        content: 'well, they dont exist. sorry. ' + user.id
      });
    }
    list.find('tr.to_remove').remove();
  }
  return renderPartial();
};

renderPartial = function() {
  var bundle, change, cumulative, index, list, new_text, node, old_text, progress, rate, timeDelta, words, _ref;
  if (!(sync.question && sync.timing)) {
    return;
  }
  if (sync.question !== last_question) {
    changeQuestion();
    last_question = sync.question;
  }
  timeDelta = time() - sync.begin_time;
  words = sync.question.split(' ');
  _ref = sync.timing, list = _ref.list, rate = _ref.rate;
  cumulative = cumsum(list, rate);
  index = 0;
  while (timeDelta > cumulative[index]) {
    index++;
  }
  if (timeDelta > cumulative[0] / 2) {
    index++;
  }
  bundle = $('#history .bundle').first();
  new_text = words.slice(0, index).join(' ');
  old_text = bundle.find('.readout .visible').text();
  if (new_text !== old_text) {
    if (new_text.indexOf(old_text === 0)) {
      node = bundle.find('.readout .visible')[0];
      change = new_text.slice(old_text.length);
      node.appendChild(document.createTextNode(change));
    } else {
      bundle.find('.readout .visible').text(new_text);
    }
    bundle.find('.readout .unread').text(words.slice(index).join(' '));
  }
  renderTimer(sync.end_time - time());
  progress = (time() - sync.begin_time) / (sync.end_time - sync.begin_time);
  return $('.progress .bar').width(progress * 100 + '%');
};

setInterval(renderState, 1000);

setInterval(renderPartial, 50);

renderTimer = function(ms) {
  var cs, min, pad, sec, sign;
  if (sync.time_freeze) {
    $('#pause').fadeIn();
  } else {
    $('#pause').fadeOut();
  }
  $('.progress').toggleClass('progress-warning', !!sync.time_freeze);
  sign = "";
  if (ms < 0) {
    sign = "+";
  }
  sec = Math.abs(ms) / 1000;
  cs = (sec % 1).toFixed(1).slice(1);
  $('.timer .fraction').text(cs);
  min = sec / 60;
  pad = function(num) {
    var str;
    str = Math.floor(num).toString();
    while (str.length < 2) {
      str = '0' + str;
    }
    return str;
  };
  return $('.timer .face').text(sign + pad(min) + ':' + pad(sec % 60));
};

changeQuestion = function() {
  var bundle, cutoff, old;
  cutoff = 10;
  if (matchMedia('(max-width: 768px)').matches) {
    cutoff = 1;
  }
  $('.bundle').slice(cutoff).slideUp('normal', function() {
    return $(this).remove();
  });
  old = $('#history .bundle').first();
  old.removeClass('active');
  if (old.find('.readout').length > 0) {
    old.find('.readout')[0].normalize();
  }
  old.find('.readout').slideUp('slow');
  bundle = createBundle().width($('#history').width());
  bundle.addClass('active');
  $('#history').prepend(bundle.hide());
  bundle.slideDown('slow');
  return bundle.width('auto');
};

createBundle = function() {
  var addInfo, annotations, breadcrumb, readout, well;
  breadcrumb = $('<ul>').addClass('breadcrumb');
  addInfo = function(name, value) {
    breadcrumb.find('li').last().append($('<span>').addClass('divider').text('/'));
    return breadcrumb.append($('<li>').text(name + ": " + value));
  };
  addInfo('Category', sync.info.category);
  addInfo('Difficulty', sync.info.difficulty);
  addInfo('Tournament', sync.info.tournament);
  addInfo('Year', sync.info.year);
  breadcrumb.append($('<li>').addClass('answer pull-right').text("Answer: " + sync.answer));
  readout = $('<div>').addClass('readout');
  well = $('<div>').addClass('well').appendTo(readout);
  well.append($('<span>').addClass('visible'));
  well.append(document.createTextNode(' '));
  well.append($('<span>').addClass('unread').text(sync.question));
  annotations = $('<div>').addClass('annotations');
  return $('<div>').addClass('bundle').append(breadcrumb).append(readout).append(annotations);
};

chatAnnotation = function(name, text) {
  var line;
  line = $('<p>');
  $('<span>').addClass('author').text(name + " ").appendTo(line);
  $('<span>').addClass('comment').text(text).appendTo(line);
  return addAnnotation(line);
};

addAnnotation = function(el) {
  el.css('display', 'none').prependTo($('#history .bundle .annotations').first());
  return el.slideDown();
};

jQuery('.bundle .breadcrumb').live('click', function() {
  if (!$(this).is(jQuery('.bundle .breadcrumb').first())) {
    return $(this).parent().find('.readout').slideToggle();
  }
});

$('.main_input').keydown(function(e) {
  return e.stopPropagation();
});

$('.main_input').keyup(function(e) {
  var mode;
  mode = $('.main_input').data('mode');
  if (mode === 'buzz') {
    if (e.keyCode === 13) {
      sock.emit('final', $(this).val());
      return $('.main_input').attr('disabled', true).val('');
    } else {
      return sock.emit('guess', $(this).val());
    }
  } else if (mode === 'chat') {
    return $('.main_input').attr('disabled', true).val('');
  }
});

$('body').keydown(function(e) {
  var _ref;
  if (e.keyCode === 32) {
    sock.emit('buzz', 'MARP', function(result) {
      console.log(result);
      return $('.main_input').attr('disabled', false).focus();
    });
    e.preventDefault();
  } else if (e.keyCode === 83) {
    sock.emit('skip', 'yay');
  } else if (e.keyCode === 80) {
    sock.emit('pause', 'yay');
  } else if (e.keyCode === 90) {
    sock.emit('unpause', 'yay');
  } else if ((_ref = e.keyCode) === 47 || _ref === 111 || _ref === 191) {
    console.log("slash");
    e.preventDefault();
    $('.main_input').attr('disabled', false).val('chat/').focus();
  }
  return console.log(e);
});
