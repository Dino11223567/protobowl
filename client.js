// Generated by CoffeeScript 1.3.3
var addAnnotation, avg, chatAnnotation, createBundle, cumsum, generateName, public_name, renderState, sock, sync, sync_offset, sync_offsets, time, transitionQuestion,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

sock = io.connect();

sync = {};

sync_offsets = [];

sync_offset = 0;

generateName = function() {
  var adjective, animal, pick;
  adjective = 'aberrant,agressive,warty,hoary,breezy,dapper,edgy,feisty,gutsy,hardy,intrepid,jaunty,karmic,lucid,maverick,natty,oneric,precise,quantal,quizzical,curious,derisive,bodacious,nefarious';
  animal = 'axolotl,warthog,hedgehog,badger,drake,fawn,gibbon,heron,ibex,jackalope,koala,lynx,meerkat,narwhal,ocelot,penguin,quetzal,kodiak,cheetah,puma,jaguar,panther,tiger,leopard,lion,neandertal';
  pick = function(list) {
    var n;
    n = list.split(',');
    return n[Math.floor(n.length * Math.random())];
  };
  return pick(adjective) + " " + pick(animal);
};

public_name = generateName();

avg = function(list) {
  var item, sum, _i, _len;
  sum = 0;
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    item = list[_i];
    sum += item;
  }
  return sum / list.length;
};

cumsum = function(list, rate) {
  var num, sum, _i, _len, _results;
  sum = 0;
  _results = [];
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    num = list[_i];
    _results.push(sum += Math.round(num) * rate);
  }
  return _results;
};

time = function() {
  if (sync.time_freeze) {
    return sync.time_freeze;
  } else {
    return new Date - sync_offset - sync.time_offset;
  }
};

window.onbeforeunload = function() {
  localStorage.old_socket = sock.socket.sessionid;
  return null;
};

sock.on('echo', function(data, fn) {
  return fn('alive');
});

sock.on('connect', function() {
  return sock.emit('join', {
    old_socket: localStorage.old_socket,
    room_name: channel_name,
    public_name: public_name
  });
});

sock.on('sync', function(data) {
  var attr, below, item, thresh, _results;
  sync_offsets.push(+(new Date) - data.real_time);
  thresh = avg(sync_offsets);
  below = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = sync_offsets.length; _i < _len; _i++) {
      item = sync_offsets[_i];
      if (item <= thresh) {
        _results.push(item);
      }
    }
    return _results;
  })();
  sync_offset = avg(below);
  console.log('sync', data);
  _results = [];
  for (attr in data) {
    _results.push(sync[attr] = data[attr]);
  }
  return _results;
});

renderState = function() {
  var action, cumulative, index, list, rate, timeDelta, user, users, votes, words, _ref;
  if (sync.users) {
    users = (function() {
      var _i, _len, _ref, _ref1, _results;
      _ref = sync.users;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        votes = [];
        for (action in sync.voting) {
          if (_ref1 = user.id, __indexOf.call(sync.voting[action], _ref1) >= 0) {
            votes.push(action);
          }
        }
        _results.push(user.name + " (" + user.id + ") " + votes.join(", "));
      }
      return _results;
    })();
    document.querySelector('#users').innerText = users.join(', ');
  }
  if (sync.question) {
    timeDelta = time() - sync.begin_time;
    words = sync.question.split(' ');
    _ref = sync.timing, list = _ref.list, rate = _ref.rate;
    cumulative = cumsum(list, rate);
    index = 0;
    while (timeDelta > cumulative[index]) {
      index++;
    }
    if (timeDelta > cumulative[0] / 2) {
      index++;
    }
    document.querySelector("#visible").innerText = words.slice(0, index).join(' ') + " ";
    return document.querySelector("#unread").innerText = words.slice(index).join(' ');
  }
};

transitionQuestion = function() {
  var bundle;
  $('#history .bundle .readout').first().slideUp();
  bundle = createBundle().css('display', 'none');
  $('#history').prepend(bundle);
  return bundle.slideDown();
};

createBundle = function() {
  var addInfo, annotations, breadcrumb, readout;
  breadcrumb = $('<ul>').addClass('breadcrumb');
  addInfo = function(name, value) {
    breadcrumb.find('li').last().append($('<span>').addClass('divider').text('/'));
    return breadcrumb.append($('<li>').text(name + ": " + value));
  };
  addInfo('Category', 'Robots');
  addInfo('Cupholders', 'Large');
  breadcrumb.append($('<li>').addClass('answer pull-right').text("Answer: Robot Ponies"));
  readout = $('<div>').addClass('readout');
  $('<div>').addClass('well').appendTo(readout);
  readout.append($('<span>').addClass('visible'));
  readout.append($('<span>').addClass('unread'));
  annotations = $('<div>').addClass('annotations');
  return $('<div>').addClass('bundle').append(breadcrumb).append(readout).append(annotations);
};

chatAnnotation = function(name, text) {
  var line;
  line = $('<p>');
  $('<span>').addClass('author').text(name + " ").appendTo(line);
  $('<span>').addClass('comment').text(text).appendTo(line);
  return addAnnotation(line);
};

addAnnotation = function(el) {
  el.css('display', 'none').prependTo($('#history .bundle .annotations').first());
  return el.slideDown();
};

$('html').toggleClass('touchscreen', !!(__indexOf.call(window, 'ontouchstart') >= 0));

jQuery('.bundle .breadcrumb').live('click', function() {
  if (!$(this).is(jQuery('.bundle .breadcrumb').first())) {
    return $(this).parent().find('.well').slideToggle();
  }
});

document.addEventListener('keydown', function(e) {
  if (e.keyCode === 32) {
    return sock.emit('skip', 'yay');
  } else if (e.keyCode === 80) {
    return sock.emit('pause', 'yay');
  } else if (e.keyCode === 90) {
    return sock.emit('unpause', 'yay');
  }
});

$('.leaderboard tbody tr').popover({
  placement: "left"
});
