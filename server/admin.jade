doctype 5
html(lang="en")
	head
		title STALKERMODE
		style
			* {
				font-family: sans-serif;
			}
			.offline {
				color: #BBB;
			}
			.idle {
				color: #F89406;
			}
	body
		mixin score(user)
			| #{user.early * 15 + (user.correct - user.early) * 10 + user.interrupts * -5}

		mixin time(timestamp)
			- var secs = (new Date - timestamp) / 1000
			if secs > 60 * 60
				| #{Math.floor(secs / 60 / 60)} hours 
			if secs > 60
				| #{Math.floor(secs / 60) % 60} minutes 
			| #{Math.floor(secs % 60)} seconds
			| ago
			if secs > 60 * 60
				- var dt = new Date()
				- dt.setTime(timestamp)
				| &nbsp;@#{dt.toString().split(' ')[4]}
		
		mixin duration(millisecs)
			- var secs = millisecs / 1000
			if secs > 60 * 60
				| #{Math.floor(secs / 60 / 60)} hours 
			if secs > 60
				| #{Math.floor(secs / 60) % 60} minutes 
			| #{Math.floor(secs % 60)} seconds

		mixin display_user(user, room)
			li #{user.team || ''} <b>#{user.name}</b> 
				| (last seen 
				mixin time(user.last_action)
				| )
				| online for 
				mixin duration(user.time_spent)
				ul
					li score: 
						mixin score(user)
						- var precision = (user.correct/(user.guesses + 0.001)), recall = (user.correct / (user.seen + 0.001)), f_score = 2 * (precision * recall) / (precision + recall + 0.001);
						|  (correct: #{user.correct} guesses: #{user.guesses} seen: #{user.seen} interrupts: #{user.interrupts} early: #{user.early} precision: #{precision.toFixed(2)} recall: #{recall.toFixed(2)} F1 score: #{f_score.toFixed(2)}) 
					if user.users || user.rooms
						li
							| users: #{user.users} rooms: #{user.rooms}
					if user.banned
						li
							| BANNED BANNED BANNED BANNED BANNED BANNED BANNED BANNED
		- function get_online(room)	{return Object.keys(room.users).filter(function(e){return room.users[e].sockets.length > 0})}
		- function get_active(room){return get_online(room).filter(function(e){return room.users[e].last_action > new Date - 1000 * 60 * 10})}
		- function count_online(room) {return get_online(room).length}
		- function count_active(room) {return get_active(room).length}
		- function weight_room(room) {return count_online(room) + count_active(room)}
		mixin display_room(room, room_name)
			li
				a(href="/#{room_name}") #{room_name}
				| 
				a(href="/#{room_name}?ninja") (ninja mode) 
				| #{Object.keys(room.users).length} users,
				| #{count_online(room)} online
				| #{count_active(room)} active
				ul Difficulty/Subject: #{room.difficulty || "All"} #{room.category || "Pot"}
				ul
					each user, id in room.users
						if user.sockets.length > 0 && new Date - user.last_action < 1000 * 60 * 10
							mixin display_user(user)

							//- li
							//- 	form(action="/stalkermode/ban", method="post")
							//- 		input(type="hidden", name="room", value="#{room.name}")
							//- 		input(type="hidden", name="user", value="#{id}")
							//- 		input(type="submit", value="Ban #{user.name} from #{room.name}")
				ul.idle
					each user, id in room.users
						if user.sockets.length > 0 && new Date - user.last_action > 1000 * 60 * 10
							mixin display_user(user)
				ul.offline
					each user, id in room.users
						if user.sockets.length == 0
							mixin display_user(user)

		h1 STALKERMODE ENGAGED
		
		if full_room
			h4 FULL VIEW
			a(href="/stalkermode") Summary Stalkermode View
		else
			h4 SUMMARY VIEW
			a(href="/stalkermode/full") Full Stalkermode View
		p #{mem}
		- var online = 0, active_users = 0, points = 0, room_num = 0, active_rooms = 0, time_spent = 0, total_users = 0
		each room, room_name in rooms
			- room_num++
			- var active = false;
			each user, id in room.users
				- total_users++
				if user.sockets.length > 0
					- online++
					if new Date - user.last_action < 1000 * 60 * 10
						- active_users++
					- active = true
				- points += (user.early * 15 + (user.correct - user.early) * 10 + user.interrupts * -5)
				- time_spent += user.time_spent
			if active
				- active_rooms++
		p 
			| Users Online: #{online}, 
			| Active Users: #{active_users}, 
			| Total Users: #{total_users}, 
			| Total Points: #{points}, 
			| Total Rooms: #{room_num}, 
			| Active Rooms: #{active_rooms}, 
			| Time Spent: 
			mixin duration(time_spent), 
			| Journal Queue: #{queue}
		p Server started 
			mixin time(start)
		ul
			li
				a(href="/superstalkers?ninjagod") annuit coeptis
			mixin display_user(reaped)
			- var sorted_names = Object.keys(rooms).sort(function(b,a){return weight_room(rooms[a]) - weight_room(rooms[b])})
			each room_name in sorted_names
				- var room = rooms[room_name]
				if full_room || count_online(room) > 0
					mixin display_room(room, room_name)


		hr
		form(action="/stalkermode/announce", method="post")
			label(for="name") Name (no spaces!) 
			input#name(name="name", type="text", value="protobowl_announcement", style="width: 200px")
			br
			label(for="message") Message 
			input#message(type="text", name="message", style="width:500px")
			button(type="submit") Announce
		
		hr

		form(action="/stalkermode/fullsync", method="post")
			button(type="submit") Rewrite the Journal

		form(action="/stalkermode/kickoffline", method="post")
			button(type="submit") Kick Offline Users


		//- form(action="/stalkermode/update", method="post")
		//- 	button(type="submit") Trigger Application Update

		//- form(action="/stalkermode/forceupdate", method="post")
		//- 	button(type="submit") Force Application Update

		//- form(action="/stalkermode/crash", method="post")
		//- 	button(type="submit") Crash Server