// Generated by CoffeeScript 1.3.3
var checkAnswer, damlev, removeDiacritics, stopwords,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

removeDiacritics = require('./removeDiacritics').removeDiacritics;

damlev = require('./levenshtein').levenshtein;

stopwords = 'dont,accept,either,underlined,prompt,on,in,to,the,of,is,a,mentioned,before,that,have,word,equivalents,forms,jr,sr,etc,a'.toLowerCase().split(',');

checkAnswer = function(compare, answer) {
  var accepts, clean, comp, index, list, max, neg, p, part, parts, pos, scores, sorp, sorted, weight, weighted, word, _i, _j, _len, _len1;
  compare = compare.trim().split(' ');
  answer = answer.replace(/[\[\]\<\>\{\}][\w\-]+?[\[\]\<\>\{\}]/g, '');
  clean = (function() {
    var _i, _len, _ref, _results;
    _ref = answer.split(/[^\w]and[^\w]|[^\w]or[^\w]|\[|\]|\{|\}|\;|\,|\<|\>|\(|\)/g);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      part = _ref[_i];
      _results.push(part.trim());
    }
    return _results;
  })();
  clean = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = clean.length; _i < _len; _i++) {
      part = clean[_i];
      if (part !== '') {
        _results.push(part);
      }
    }
    return _results;
  })();
  pos = [];
  neg = [];
  for (_i = 0, _len = clean.length; _i < _len; _i++) {
    part = clean[_i];
    part = removeDiacritics(part);
    part = part.replace(/\"|\'|\“|\”|\.|’|\:/g, '');
    part = part.replace(/-/g, ' ');
    if (/equivalent|word form|other wrong/.test(part)) {

    } else if (/do not|dont/.test(part)) {
      neg.push(part);
    } else if (/accept/.test(part)) {
      comp = part.split(/before|until/);
      if (comp.length > 1) {
        neg.push(comp[1]);
      }
      pos.push(comp[0]);
    } else {
      pos.push(part);
    }
  }
  accepts = [];
  for (_j = 0, _len1 = pos.length; _j < _len1; _j++) {
    p = pos[_j];
    list = (function() {
      var _k, _len2, _ref, _ref1, _results;
      _ref = p.split(/\s/);
      _results = [];
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        word = _ref[_k];
        if ((_ref1 = word.toLowerCase().trim(), __indexOf.call(stopwords, _ref1) < 0) && word.trim() !== '') {
          _results.push(word);
        }
      }
      return _results;
    })();
    if (list.length > 0) {
      console.log(list);
      parts = (function() {
        var _k, _ref, _results;
        _results = [];
        for (index = _k = 0, _ref = list.length; 0 <= _ref ? _k < _ref : _k > _ref; index = 0 <= _ref ? ++_k : --_k) {
          scores = (function() {
            var _l, _len2, _results1;
            _results1 = [];
            for (_l = 0, _len2 = compare.length; _l < _len2; _l++) {
              word = compare[_l];
              _results1.push([word, damlev(list[index].toLowerCase(), word.toLowerCase())]);
            }
            return _results1;
          })();
          sorted = scores.sort(function(_arg, _arg1) {
            var a, b, w, z;
            w = _arg[0], a = _arg[1];
            z = _arg1[0], b = _arg1[1];
            return a - b;
          });
          weight = 1;
          if (index === 0) {
            weight = 2;
          }
          if (index === list.length - 1) {
            weight = 3;
          }
          weighted = sorted[0][1] * weight / list[index].length;
          console.log("-", sorted[0][0], list[index], sorted[0][1], weighted);
          _results.push(weighted);
        }
        return _results;
      })();
      sorp = parts.sort(function(a, b) {
        return a - b;
      });
      accepts.push(sorp[0]);
    }
  }
  max = accepts.sort(function(a, b) {
    return a - b;
  });
  console.log(max);
  return max[0];
};

exports.checkAnswer = checkAnswer;
