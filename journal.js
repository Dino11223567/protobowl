// Generated by CoffeeScript 1.3.3
var http, last_full_sync, port, rooms, server, sync_room, util;

http = require('http');

util = require('util');

rooms = {};

last_full_sync = 0;

sync_room = function(json) {
  var field, value, _name, _results;
  console.log('room sync', json.name);
  rooms[_name = json.name] || (rooms[_name] = {});
  _results = [];
  for (field in json) {
    value = json[field];
    _results.push(rooms[json.name][field] = value);
  }
  return _results;
};

server = http.createServer(function(req, res) {
  var packet;
  if (req.url === '/journal' && req.method === 'POST') {
    req.setEncoding('utf-8');
    packet = '';
    req.on('data', function(chunk) {
      return packet += chunk;
    });
    req.on('end', function() {
      console.log('doing partial sync');
      return sync_room(JSON.parse(packet));
    });
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    if (new Date - last_full_sync < 1000 * 60 * 30) {
      res.end('saved');
    } else {
      console.log('requesting full synchronization');
      res.end('do_full_sync');
    }
  }
  if (req.url === '/full_sync' && req.method === 'POST') {
    req.setEncoding('utf-8');
    packet = '';
    req.on('data', function(chunk) {
      return packet += chunk;
    });
    req.on('end', function() {
      var json, _i, _len, _ref, _results;
      last_full_sync = +(new Date);
      console.log('doing full sync');
      rooms = {};
      _ref = JSON.parse(packet);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        json = _ref[_i];
        _results.push(sync_room(json));
      }
      return _results;
    });
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    return res.end('done full sync');
  } else if (req.url === '/retrieve') {
    res.writeHead(200, {
      'Content-Type': 'application/json'
    });
    return res.end(JSON.stringify(rooms));
  } else {
    res.writeHead(200, {
      'Content-Type': 'text/plain'
    });
    return res.end(util.inspect(process.memoryUsage()) + '\n\n' + JSON.stringify(rooms, null, '  '));
  }
});

port = process.env.PORT || 15865;

console.log('trying to listen on', port);

server.listen(port);
